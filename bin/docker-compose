#!/bin/bash
#
# Run this script from the project root, e.g.:
# $ bin/docker-compose up --build -d
#
# You can pass docker-compose arguments, like you normally would.

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")"/.. && pwd)"
COMPOSE_CMD=$1

cd "${PROJECT_ROOT}" || exit 1

# Initialize default variables
# shellcheck disable=SC1091
. ./bin/docker-libvariables
# Initialize functions
# shellcheck disable=SC1091
. ./bin/docker-libfunctions

# Customize docker commands with our own added functionality
case ${COMPOSE_CMD} in
"up")
    create_docker_network anzusystems_network "${DOCKER_NETWORK_SUBNET}"
    ;;
"down")
    DOCKER_NETWORK_DELETE=true
    ;;
*) ;;
esac

# Setup docker for the current project
docker_project_setup

if ${DOCKER_START_LOCAL_PROXY}; then
    DOCKER_COMPOSE_FILES=("-f docker-compose.yml")
    DOCKER_COMPOSE_FILES+=("-f docker-compose-local-proxy.yml")
    DOCKER_COMPOSE_OVERRIDE="$(ls docker-compose.override.y*ml 2> /dev/null)"
    if [ -n "${DOCKER_COMPOSE_OVERRIDE}" ]; then
        DOCKER_COMPOSE_FILES+=("-f ${DOCKER_COMPOSE_OVERRIDE}")
    fi
fi

CMD="docker compose --env-file ${ENV_DOCKER_FILE} ${DOCKER_COMPOSE_FILES[*]} $*"
echo_debug "Whole command: '${CMD}'"
eval "${CMD}"

if ${DOCKER_NETWORK_DELETE}; then
    delete_docker_network anzusystems_network
fi
